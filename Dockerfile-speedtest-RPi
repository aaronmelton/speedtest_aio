##################
### BASE IMAGE ###
##################

ARG PYTHON_VER=3.10

# Need to use the Buster image for Raspberry Pis
FROM python:${PYTHON_VER}-buster AS base
LABEL prune=true

WORKDIR /app/

# Poetry from the repo doesn't work for whatever reason so we'll install
# directly from the source and update all poetry commands to use the path
# to the new poetry
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
RUN /root/.poetry/bin/poetry config virtualenvs.create false

COPY pyproject.toml .

RUN /root/.poetry/bin/poetry install --no-dev

##################
### TEST IMAGE ###
##################

FROM base AS test
LABEL prune=true

RUN /root/.poetry/bin/poetry install

COPY . .

RUN echo '-->Running Flake8' && \
    flake8 . && \
    echo '-->Running Black' && \
    black --check --diff . && \
    echo '-->Running isort' && \
    find . -name '*.py' | xargs isort && \
    echo '-->Running Pylint' && \
    find . -name '*.py' | xargs pylint --rcfile=pyproject.toml && \
    echo '-->Running pydocstyle' && \
    pydocstyle . --config=pyproject.toml && \
    echo '-->Running Bandit' && \
    bandit --recursive ./ --configfile pyproject.toml

###################
### FINAL IMAGE ###
###################

FROM python:${PYTHON_VER}-slim-buster

ARG PYTHON_VER

RUN apt-get update && apt-get install --no-install-recommends -y curl && \
    apt-get clean

# To maintain consistency with the non-RPi setup, we will need to install
# supercronic from GitHub
ENV SUPERCRONIC_URL=https://github.com/aptible/supercronic/releases/download/v0.1.12/supercronic-linux-arm \
    SUPERCRONIC=supercronic-linux-arm \
    SUPERCRONIC_SHA1SUM=d72d3d40065c0188b3f1a0e38fe6fecaa098aad5

RUN curl -fsSLO "$SUPERCRONIC_URL" \
 && echo "${SUPERCRONIC_SHA1SUM}  ${SUPERCRONIC}" | sha1sum -c - \
 && chmod +x "$SUPERCRONIC" \
 && mv "$SUPERCRONIC" "/usr/bin/${SUPERCRONIC}" \
 && ln -s "/usr/bin/${SUPERCRONIC}" /usr/bin/supercronic

RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime

# Install Speedtest CLI
RUN pip install speedtest-cli

WORKDIR /app

COPY entrypoint.sh /run/
RUN chmod 755 /run/entrypoint.sh

RUN addgroup docker && adduser --system --shell /bin/false --disabled-password --no-create-home docker --ingroup docker

COPY crontab /app/
COPY speedtest_aio/*.py /app/
RUN mkdir -p /app/db
RUN mkdir -p /app/log/
RUN chown -R docker:docker /app

USER docker

ENTRYPOINT ["/run/entrypoint.sh"]
